name: Build and Release macOS App

on:
  push:
    tags: ['v*']

env:
  APP_NAME: "VTS"
  BUNDLE_ID: "com.voicetypestudio.app"

permissions:
  contents: write
  
jobs:
  build:
    runs-on: macos-15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'
    
    - name: Setup Node.js (for sindresorhus/create-dmg)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Make build script executable
      run: chmod +x scripts/build-dmg.sh
    
    - name: Build, Sign, and Notarize DMG
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_NAME: ${{ env.APP_NAME }}
        BUNDLE_ID: ${{ env.BUNDLE_ID }}
        GITHUB_ACTIONS: true
        GITHUB_REF: ${{ github.ref }}
      run: ./scripts/build-dmg.sh

    - name: Extract version info
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION_NUMBER=${VERSION#v}  # Remove 'v' prefix
        
        # Get the previous tag for comparison
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^${VERSION}$" | head -n1)
        if [ -z "$PREVIOUS_TAG" ]; then
          PREVIOUS_TAG="v0.2.2"  # Fallback for first release
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
        echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION_NUMBER"
        echo "Previous tag: $PREVIOUS_TAG"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          ${{ env.APP_NAME }}-${{ steps.get_version.outputs.version_number }}-Universal.dmg
          checksums.txt
        retention-days: 1
        if-no-files-found: error

  sparkle-and-release:
    needs: build
    runs-on: macos-15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history and tags

    - name: Setup Node.js for `generate-appcast.js`
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Extract version info
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION_NUMBER=${VERSION#v}  # Remove 'v' prefix
        
        # Get the previous tag for comparison
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^${VERSION}$" | head -n1)
        if [ -z "$PREVIOUS_TAG" ]; then
          PREVIOUS_TAG="v0.2.2"  # Fallback for first release
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
        echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION_NUMBER"
        echo "Previous tag: $PREVIOUS_TAG"

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: .

    - name: Download Sparkle Tools and Sign DMG
      env:
        SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
        VERSION_NUMBER: ${{ steps.get_version.outputs.version_number }}
        APP_NAME: ${{ env.APP_NAME }}
      run: |          
        echo "üîê Signing DMG with Sparkle private key..."
        
        # Create temporary directory for Sparkle tools
        TEMP_DIR=$(mktemp -d)
        echo "üìÅ Created temp directory: $TEMP_DIR"
        cd "$TEMP_DIR"
        
        # Download Sparkle tools
        SPARKLE_VERSION="2.8.0"
        SPARKLE_URL="https://github.com/sparkle-project/Sparkle/releases/download/${SPARKLE_VERSION}/Sparkle-${SPARKLE_VERSION}.tar.xz"
        echo "üì• Downloading Sparkle tools from: $SPARKLE_URL"
        
        if ! curl -L -o sparkle.tar.xz "$SPARKLE_URL"; then
          echo "‚ùå Failed to download Sparkle tools"
          exit 1
        fi
        
        echo "üì¶ Extracting Sparkle tools..."
        if ! tar -xf sparkle.tar.xz; then
          echo "‚ùå Failed to extract Sparkle tools"
          echo "üìÑ Archive contents:"
          tar -tf sparkle.tar.xz || echo "Cannot list archive contents"
          exit 1
        fi
        
        echo "üìÇ Contents after extraction:"
        ls -la
        
        # Check for bin directory and sign_update tool
        if [[ ! -d "bin" ]]; then
          echo "‚ùå bin directory not found after extraction"
          echo "üìÇ Available directories:"
          find . -type d -name "*" | head -10
          exit 1
        fi
        
        if [[ ! -f "bin/sign_update" ]]; then
          echo "‚ùå sign_update tool not found in bin directory"
          echo "üìÇ Contents of bin directory:"
          ls -la bin/
          exit 1
        fi
        
        # Make sign_update executable
        chmod +x bin/sign_update
        
        # Create private key file
        echo "$SPARKLE_PRIVATE_KEY" > private_key
        
        # Sign the DMG and generate signature
        DMG_PATH="${GITHUB_WORKSPACE}/${APP_NAME}-${VERSION_NUMBER}-Universal.dmg"
        echo "üîç Looking for DMG at: $DMG_PATH"
        
        if [[ -f "$DMG_PATH" ]]; then
          echo "‚úÖ DMG file found, generating signature..."
          
          # Generate signature with error handling (using correct syntax)
          if ! SIGNATURE=$(./bin/sign_update -p --ed-key-file private_key "$DMG_PATH"); then
            echo "‚ùå Failed to generate signature"
            echo "üîß Debugging info:"
            file "$DMG_PATH"
            ls -la "$DMG_PATH"
            ./bin/sign_update --help || echo "No help available"
            exit 1
          fi
          
          echo "Generated signature: $SIGNATURE"
          
          # Validate signature is not empty
          if [[ -z "$SIGNATURE" ]]; then
            echo "‚ùå Generated signature is empty"
            exit 1
          fi
          
          # Save signature to file for the appcast
          echo "$SIGNATURE" > "${GITHUB_WORKSPACE}/${APP_NAME}-${VERSION_NUMBER}-Universal.dmg.sig"
          
          # Also create a JSON file with release metadata
          cat > "${GITHUB_WORKSPACE}/release-metadata.json" << EOF
        {
          "version": "${VERSION_NUMBER}",
          "dmg_name": "${APP_NAME}-${VERSION_NUMBER}-Universal.dmg",
          "sparkle_signature": "$SIGNATURE",
          "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
          
          echo "‚úÖ Successfully signed DMG with Sparkle signature"
        else
          echo "‚ùå DMG file not found: $DMG_PATH"
          echo "üìÇ Available files in workspace:"
          ls -la "$GITHUB_WORKSPACE"/*.dmg || echo "No DMG files found"
          exit 1
        fi
        
        # Cleanup
        cd "$GITHUB_WORKSPACE"
        rm -rf "$TEMP_DIR"

    - name: Update Release with Assets
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: ${{ env.APP_NAME }} ${{ steps.get_version.outputs.version_number }}
        draft: false
        prerelease: false
        files: |
          ${{ env.APP_NAME }}-${{ steps.get_version.outputs.version_number }}-Universal.dmg
          ${{ env.APP_NAME }}-${{ steps.get_version.outputs.version_number }}-Universal.dmg.sig
          checksums.txt
          release-metadata.json
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate Appcast
      env:
        SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
        VERSION_NUMBER: ${{ steps.get_version.outputs.version_number }}
        VERSION: ${{ steps.get_version.outputs.version }}
        APP_NAME: ${{ env.APP_NAME }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üìã Generating appcast XML from GitHub releases..."
        
        # Read the Sparkle signature
        SIGNATURE_FILE="${APP_NAME}-${VERSION_NUMBER}-Universal.dmg.sig"
        if [[ -f "$SIGNATURE_FILE" ]]; then
          SPARKLE_SIGNATURE=$(cat "$SIGNATURE_FILE")
          echo "‚úÖ Found Sparkle signature: ${SPARKLE_SIGNATURE:0:32}..."
        else
          echo "‚ùå No Sparkle signature found at: $SIGNATURE_FILE"
          exit 1
        fi
        
        # Fetch releases data from GitHub API
        echo "ÔøΩ Fetching releases from GitHub API..."
        gh api repos/j05u3/VTS/releases --paginate > releases.json
        
        # Generate the appcast XML
        echo "üèóÔ∏è  Generating appcast XML..."
        node scripts/generate-appcast.js releases.json --inject-signatures > appcast-template.xml
        
        # Replace the signature placeholder with the actual signature
        echo "üîê Injecting Sparkle signature..."
        # Use printf to safely handle special characters in the signature
        printf '%s\n' "s|SIGNATURE_PLACEHOLDER|${SPARKLE_SIGNATURE}|g" > temp_sed_script.sed
        sed -f temp_sed_script.sed appcast-template.xml > appcast.xml
        rm temp_sed_script.sed
        
        # Validate the generated XML
        echo "‚úÖ Validating generated appcast XML..."
        if ! command -v xmllint &> /dev/null; then
          echo "‚ö†Ô∏è  xmllint not available, skipping validation"
        else
          if xmllint --noout appcast.xml; then
            echo "‚úÖ Appcast XML is valid"
          else
            echo "‚ùå Generated appcast XML is invalid"
            exit 1
          fi
        fi
        
        # Show some info about the generated appcast
        echo "üìã Appcast summary:"
        echo "   Items: $(grep -c '<item>' appcast.xml || echo '0')"
        echo "   Size: $(wc -c < appcast.xml) bytes"
        echo "   Latest version signature: ${SPARKLE_SIGNATURE:0:32}..."

    - name: Add Appcast to Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        files: |
          appcast.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Success logs
      if: success()
      run: |
        echo "üéâ Release ${{ steps.get_version.outputs.version }} has been published!"
        echo "üì° Appcast will be available as a release asset."
        echo "üîó Appcast URL: https://github.com/j05u3/VTS/releases/latest/download/appcast.xml"

  update-homebrew-tap:
    needs: sparkle-and-release
    runs-on: macos-15
    if: success()
    
    env:
      CASK_TOKEN: "voice-typing-studio"
    
    steps:
    - name: Checkout main repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Extract version info
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION_NUMBER=${VERSION#v}  # Remove 'v' prefix
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION_NUMBER"

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: .

    - name: Extract SHA256 checksum
      id: get_checksum
      run: |
        # Extract SHA256 from checksums.txt (first line, first field)
        SHA256=$(head -n1 checksums.txt | cut -d' ' -f1)
        echo "sha256=$SHA256" >> $GITHUB_OUTPUT
        echo "SHA256 checksum: $SHA256"

    - name: Checkout homebrew-tap repository
      uses: actions/checkout@v4
      with:
        repository: j05u3/homebrew-tap
        token: ${{ secrets.FINE_GRAINED_VTS_HOMEBREW_TAP_PAT }}
        path: homebrew-tap
        
    - name: Create or update cask
      env:
        VERSION_NUMBER: ${{ steps.get_version.outputs.version_number }}
        VERSION: ${{ steps.get_version.outputs.version }}
        SHA256: ${{ steps.get_checksum.outputs.sha256 }}
        APP_NAME: ${{ env.APP_NAME }}
        BUNDLE_ID: ${{ env.BUNDLE_ID }}
        CASK_TOKEN: ${{ env.CASK_TOKEN }}
      run: |
        echo "üç∫ Creating/updating Homebrew cask for ${APP_NAME}..."
        
        # Ensure Casks directory exists
        mkdir -p homebrew-tap/Casks
        
        # Create the cask file
        cat > homebrew-tap/Casks/${CASK_TOKEN}.rb << EOF
        cask "${CASK_TOKEN}" do
          version "${VERSION_NUMBER}"
          sha256 "${SHA256}"

          url "https://github.com/j05u3/VTS/releases/download/${VERSION}/${APP_NAME}-#{version}-Universal.dmg"
          name "VTS"
          name "Voice Typing Studio"
          desc "Open-source macOS dictation replacement with AI-powered transcription"
          homepage "https://github.com/j05u3/VTS"

          livecheck do
            url "https://github.com/j05u3/VTS/releases/latest/download/appcast.xml"
            strategy :sparkle
          end

          auto_updates true

          app "VTSApp.app"

          zap trash: [
            "~/Library/Preferences/${BUNDLE_ID}.plist",
            "~/Library/Caches/${BUNDLE_ID}",
            "~/Library/Application Support/VTS",
            "~/Library/Saved Application State/${BUNDLE_ID}.savedState",
          ]
        end
        EOF
        
        echo "‚úÖ Cask file created successfully"
        echo "üìÑ Cask contents:"
        cat homebrew-tap/Casks/${CASK_TOKEN}.rb

    - name: Commit and push cask update
      env:
        VERSION_NUMBER: ${{ steps.get_version.outputs.version_number }}
        APP_NAME: ${{ env.APP_NAME }}
        CASK_TOKEN: ${{ env.CASK_TOKEN }}
      run: |
        cd homebrew-tap
        
        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Add and commit changes
        git add Casks/${CASK_TOKEN}.rb
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è  No changes to commit (cask already up to date)"
        else
          git commit -m "Update ${APP_NAME} to ${VERSION_NUMBER}

        - Updated version to ${VERSION_NUMBER}
        - Updated SHA256 checksum
        - Release URL: https://github.com/j05u3/VTS/releases/tag/v${VERSION_NUMBER}"
          
          # Push changes
          git push origin main
          echo "üöÄ Successfully pushed cask update to homebrew-tap repository"
        fi

    - name: Homebrew tap success logs
      if: success()
      env:
        CASK_TOKEN: ${{ env.CASK_TOKEN }}
      run: |
        echo "üç∫ Homebrew tap updated successfully!"
        echo "üì¶ Users can now install VTS with: brew install j05u3/tap/${CASK_TOKEN}"